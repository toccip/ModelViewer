#version 400 core

in vec3 position;
in vec2 uv;
in vec3 normal;

out vec2 pass_uv;
out vec3 surface_normal;
out vec3 light_vector;
out vec3 camera_vector;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 light_position;

void main(void){
	vec4 world_position = transformationMatrix * vec4(position, 1.0);
	gl_Position = projectionMatrix * viewMatrix * world_position;
	pass_uv = uv;
	
	surface_normal = (transformationMatrix * vec4(normal, 0.0)).xyz;
	light_vector = light_position - world_position.xyz;
	camera_vector = (inverse(viewMatrix) * vec4(0.0, 0.0, 0.0, 1.0)).xyz - world_position.xyz;
}